CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 23 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (40486563,761170,40492507,759932,759933,37208322,37208326,36717260,36712721,37208324,37208328,37208325,37208329,36712719,36712722,36712720,36712723,36712724,36712725,4091467,4092511,4095741,4157332,4095740,4091466,4091464,4092512,4091465,133711,37016439,37018660,433148,36684817,36684820,36712934,432845,4246036,137809,432263,441515,442127,440956,436353,40489927,40486565,40489928,40489942,40489485,40489897,40489945,4162253)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4092512,4162253)
  and c.invalid_reason is null

) I
) C UNION ALL 
SELECT 24 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4202789,40492386,40493007,40485978,45773362,4156113,40486213,197230,4182917,4182920,4280901,4283737,4289390,4289516,4281029,4289521,4289091,4283613,4289689,4283878,4281159,4289826,4289674,4283886,4289677,4183630,4196261,4112779,198082,42538693,4162860,192847,441520,45770892,36716856,4245827,4287626,4288552,4265736,4288674,4287631,4221383,4263005,4286883,4112867,4312277,4248064,4315674,4314495,4240071,4241808,4241809,4240924,4240925,4241177,4241435,4241174,4240439,4240440,4240688,4241811,4240437,4240922)

) I
) C UNION ALL 
SELECT 25 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (40391231,40391278,40390439,4276327,4263114,4274179,4291922,4301886,4279132,4273249,4300057,4101554,45773054,45769743,45769745,4248438,45769746,45769749,37396737,4295641,37397555,36674976,4161431,4164004,4288243,4265741,4287634,4113520,764925,4307838,4161139,4265306,4265307,4265308,4240442,4241437,4240443,4241545,4241811,4240191,4240689,4241546,4241305,4241306,4241181,4030340,200051,4047650)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (40391231,40391278,40390439,4276327,4263114,4274179,4291922,4301886,4279132,4273249,4300057,4101554,45773054,45769743,45769745,4248438,45769746,45769749,37396737,4295641,37397555,36674976,4161431,4164004,4288243,4265741,4287634,4113520,764925,4307838,4161139,4265306,4265307,4265308,4240442,4241437,4240443,4241545,4241811,4240191,4240689,4241546,4241305,4241306,4241181,4030340,200051,4047650)
  and c.invalid_reason is null

) I
) C UNION ALL 
SELECT 27 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4091901,4092011,37204495,4057008,4119951,4247537,37204812,37209531,37312140,43531619,37116420,42535107,40479264,42535106,45766075,4178129,4267568,42535227,4164092,762148,761444,35616028,35615035,43531681,35616027,35615034,760875,765155,762417,762020,765546,44782747,762015,765541,44782748,760876,765540,762418,44782767,46270071,762022,44782743,762021,760877,762013,762419,44782744,762026,765156,374060,4120091,312327,44782769,44782712,45766115,434376,45766150,438438,4243372,4108669,4151046,4275436,438170,45771322,438447,441579,436706,4324413,4051874,4303359,4147223,4145721,4119944,4119456,4119945,4119946,4121466,4124685,4270024,35610091,319039,45768439,45768888,4119457,4119943,4121464,4121465,4124684,4119948,4126801,4296653,46270162,761737,46270163,43020460,45766076,761736,46270159,46270160,45766116,45766151,35611570,35611571,46274044,46270161,46273495,46270158,46270164,36684840,444406,35610093,4119947,36716125,4338523,36712812,36712813,435616,4172629,45757212,442054,432388,436768,437948,4224848,37204664,37204666,42537642,4031930,4246316,43020490,35615015,35615014,4078016,37204663,37204670,37204671,43020491,36712951,36712950,36712954,35615017,36712953,37209564,37204668,37204667,37204669,37204665,36717278,35615016,36712952,37209563,4099850,43531588,36712983,35608001,313224,43021429,43021430,43021569,762627,4108360,765664,4031045,43531717,4045747,4296729,762630,763094,4121481,37109912,43020930,37108582,4094188,4007949,762755,43021427,4005616,761930,4046444,4199962,45766110,45766109,45766088,45771319,45766111,45766108,4102252,37110240,37119077,4216773,42535411,42535703,42535685,4009154,764123,43021851,43020493,4068155,4088504,4088986,313217,4108832,44782442,314665,4088987,4108830,4115173,37110775,42872924,4171269,4091903,316135,43020929,4305210,4175473,42536726,4081675,36712986,36675148,4088502,4088503,4038688,4089459,4228836,4088983,4006294,761798,437308,762701,442263,374055,4338227,4175205,4250169,37109253,37109252,321587,37108909,4145355,762149,37204827,37310623,37312367,759831,37204002,37312368,37108912,42535098,4088984,4228448,45766074,4319330,4111710,4116060,4303408,313791,40484036,4242670,321042,4041343,4269927,4309332,42534858,4172822,4173792,46269805,46274066,46269812,4301015,4173446,4306984,4311273,37398951,761738,317669,4120088,44784217,44784234,45757098,44784235,4211509,4256374,44783658,4121629,4213731,4296331,4288310,313226,762700,4119617,442615,763093,4112020,4311124,4102124,4201411,43531599,436392,4043734,4046228,4303238,40481147,4146840,42536725,437540,762629,4317291,4317292,36716999,4111711,4045749,45766201,37204809,4029497,4278243,4121803,380747,45766199,4045751,4048789,372924,316437,4190891,45766122,375557,43531607,374384,37312016,37312017,37110239,37312015,37312014,37110238,37110678,37110237,37110679,37312013,441874,4140462,45766121,4269085,4102202,4062269,4066234,4046443,762938,762811,4048787,4223544,4048786,4043735,45766160,45766161,4284132,45766162,4219904,381316,37395576,37309665,761785,42539262,42535148,42535508,42535112,42535504,42535146,42539195,42535506,761835,42535461,765281,42535149,42535507,42535111,42535503,42535147,42535110,42535505,761836,37395574,37395575,42535460,37209562,37309657,42535459,42535458,42535511,42539166,42535114,42535512,761789,42535113,761792,762344,764721,4163543,381591,43021930,316494,4002302,36715042,4141360,4137382,4006976,765568,4098133,44782732,45768887,45771016,4338905,4128968,4337830,36680604,320744,46269694,4267892,4088337,4099974,4121615,316999,4245320,4243358,37204744,37204745,4243901,4183995,372721,45771351,4119782,4091512,4069188,4201023,4178321,4244961,315069,4119598,4068740,45773171,40479232,45766098,4247465,4246955,4002631,4117112,317576,46269996,4175846,37016181,40641917,37309630,40481919,44806109,4045734,37396293,4046884,4121341,4304839,4159164,4153380,4027540,762585,765899,762583,762584,42537643,37109512,37016924,37117127,45772779,37108910,37108913,37016888,37108911,37117075,432346,4108673,45766077,4311006,4236004,4121479,4121480,4143042,4164083,4122762,4148028,4153352,4039439,4029415,4209442,4031342,4216353,44782551,4222582,4224614,4134421,4104693,4182186,42536240,42539472,42536242,42536241,42536243,42539014,4185701,4250507,4267862,4338502,4052462,4327350,4217146,4090122,36675005,4006783,4017134,4240832,37395821,45766128,35624231,4121613,4119603,4129841,314749,4172863,43021733,43022053,317100,4222125,4226399,37204826,761786,765282,314379,4215259,4078314,4029303,35609033,320425,40481891,36715370,36717434,441246,40481389,40484910,42535677,764853,764816,42535704,42535676,764815,37396995,4208824,4164289,37119072,4029597,45766123,4300451,46284985,43020494,4120086,4078058,4320474,764719,37395937,37109917,4171193,4303980,4206453,4108359,4116269,4137871,4124697,4304095,4298806,4088336,4088338,43531712,43530960,43530934,4131383,315116,436277,437427,439190,36717463,4096625,4112021,4088332,4121624,765606,4243143,4029966,4041678,4043900,4120316,4194609,4139561,4179912,37017187,4166844,4221549,4310996,43530669,43530670,37110765,4108869,40482076,40483310,4161597,4091899,4166380,4218739,4088351,4219010,762340,4295336,4171887,316998,313209,761797,43020496,43020498,761791,4155962,4111543,761793,4268046,4112022,761795,762345,4098441,4178578,4153404,764149,4088222,4119601,314664,37396235,43021298,37117768,45768480,437892,36716114,42536724,46272503,36716590,36717575,4088347,4020435,35608087,4173632,763014,4110194,4077819,4088496,36715675,36715676,4003276,4219469,43021816,4323202,4205137,313780,4034164,42535686,42535419,197303,765518,443525,764851,764814,762089,762093,762090,42535417,42535416,764849,764820,40480946,764813,40482266,764850,765461,765462,42539180,762091,764852,37110064,378774,36713633,4155007,4176112,4271464,4023336,379778,37395562,444091,443790,443864,377254,4045742,439295,763009,4242222,4194897,381036,762708,765775,4032493,37204661,4089460,4088985,4089463,4329847,37309626,4170094,4154704,37398927,443522,4106274,4110550,4049043,4173170,45765438,4159152,443523,36717594,4217221,761061,42539038,36714444,4006295,4191222,761790,314667,4111713,4200113,4119602,44784220,44782789,44782707,762096,37017075,4037682,4168972,442055,442049,442052,442051,442050,433832,442053,434112,433545,437060,4061473,435026,440477,442420,442048,439380,439379,4331168,4102928,4111716,765774,4112024,4111715,4112023,765907,765495,4110197,4111717,762936,762707,764445,762343,43531605,764503,762926,762342,37207955,42536349,42539161,42535509,42538819,42536338,42535510,42538981,764447,42535457,762341,37207895,42539514,42538820,42539276,42538818,42536337,42539787,42538828,764446,42535456,764362,764498,764501,764499,764496,764502,764500,764497,4189462,764504,764506,764505,4119949,4121467,4119950,314666,4121468,4124700,4030583,4089464,4023571,372654,4146293,43530612,43530611,443609,443599,43530742,42534989,4006208,4154290,4146580,4190306,4108241,4119604,4111546,4111698,317893,313792,437579,4111570,4138833,36716757,4080888,4171108,4298750,4232691,4124702,4232697,4258998,318137,4104694,4049750,4137761,4110676,4229432,4102204,4174848,4263703,4237180,4237181,762628,4110195,4045748,762631,763095,4301259,43020495,44784368,4119605,4124701,4030582,35610087,44784475,4108681,4124704,4206867,44784293,35610089,4207921,4209541,762954,443239,42539346,4109365,316429,45766200,4238315,44784218,44784219,44782643,4230479,764734,442419,442418,313272,313833,4091708,440417,37109911,4280067,45757145,37016922,43530605,4119608,4253796,45766471,4121618,4119610,4263370,4199501,763267,4178622,4236271,40485430,4124696,4124698,4124699,4111552,37204863,45765600,4317953,45773220,762339,4302802,4249027,314059,4184950,316432,321590,4138973,4244693,4217860,4138545,4280348,4032785,761796,43020497,43021859,4110196,761794,4031946,4049219,4089461,4091904,4173794,380943,762351,4079430,4079433,4082161,764707,42536193,4079431,4079432,4079434,4082162,42536192,45766085,4111707,4120104,4079424,4079120,4079021,4082163,37312595,318448,45773166,40479606,4116206,4047634,4043901,4121335,4119136,4041680,4041679,4169261,44784236,4261842,4161455,36717605,37109909,4124686,4111393,4028322,4277903,4303256,36674897,4120084,4210313,4088352,4088210,4091446,4171683,317302,4179790,4088350,40484120,37396805,4249605,43530636,37309659,42535420,42535421,762095,42535422,42539183,42535879,42535880,4045750,760985,761994,42538826,42535836,765404,374371,42538980,42539411,4188347,37110241,4168056,4046363,4119607,4119609,4108952,4111708,4234089,765132,4108217,4108677,4108218,45766241,45766114,45766113,45773170,765488,40480273,4248028,4091902,42538755,441872,4275423,4120085,4325850,44784634,40480216,4048790,4318863,43021181,43021180,315643,4254116,40489292,4100225,764716,4217471,4104695,4100223,4319332,4167985,764712,764714,764708,763149,4100224,4098706,4277833,764710,764701,764705,764726,4228209,761412,4234264,762828,4319329,4048890,4137209,4273550,4057329,42539416,761411,42535874,42535097,45767657,764722,4144150,764725,4171853,42539417,761410,42538998,42535096,764723,764703,4102203,4290940,4079905,4105338,4159140,4262389,44783199,36714606,4078315,4134941,4134159,373503,4139517,46272244,321315,4124682,439693,42710031,36714994,4120087,4099778,36712982,4106715,43021222,4215653,4179824,4185572,4008580,4327066,4088507,4218242,36714539,437894,4111700,4092010,4244893,4108828,4066289,4089462,4088506,40622721,4088505,4180026,37208181,4274969,4185117,439296,763003,763035,4121637,380423,763004,765609,434656,4273526,4048785,4086178,37110515,4086313,4253363,36676642)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4091901,4092011,37204495,4057008,4119951,4247537,37204812,37209531,37312140,43531619,37116420,42535107,40479264,42535106,45766075,4178129,4267568,42535227,4164092,762148,761444,35616028,35615035,43531681,35616027,35615034,760875,765155,762417,762020,765546,44782747,762015,765541,44782748,760876,765540,762418,44782767,46270071,762022,44782743,762021,760877,762013,762419,44782744,762026,765156,374060,4120091,312327,44782769,44782712,45766115,434376,45766150,438438,4243372,4108669,4151046,4275436,438170,45771322,438447,441579,436706,4324413,4051874,4303359,4147223,4145721,4119944,4119456,4119945,4119946,4121466,4124685,4270024,35610091,319039,45768439,45768888,4119457,4119943,4121464,4121465,4124684,4119948,4126801,4296653,46270162,761737,46270163,43020460,45766076,761736,46270159,46270160,45766116,45766151,35611570,35611571,46274044,46270161,46273495,46270158,46270164,36684840,444406,35610093,4119947,36716125,4338523,36712812,36712813,435616,4172629,45757212,442054,432388,436768,437948,4224848,37204664,37204666,42537642,4031930,4246316,43020490,35615015,35615014,4078016,37204663,37204670,37204671,43020491,36712951,36712950,36712954,35615017,36712953,37209564,37204668,37204667,37204669,37204665,36717278,35615016,36712952,37209563,4099850,43531588,36712983,35608001,313224,43021429,43021430,43021569,762627,4108360,765664,4031045,43531717,4045747,4296729,762630,763094,4121481,37109912,43020930,37108582,4094188,4007949,762755,43021427,4005616,761930,4046444,4199962,45766110,45766109,45766088,45771319,45766111,45766108,4102252,37110240,37119077,4216773,42535411,42535703,42535685,4009154,764123,43021851,43020493,4068155,4088504,4088986,313217,4108832,44782442,314665,4088987,4108830,4115173,37110775,42872924,4171269,4091903,316135,43020929,4305210,4175473,42536726,4081675,36712986,36675148,4088502,4088503,4038688,4089459,4228836,4088983,4006294,761798,437308,762701,442263,374055,4338227,4175205,4250169,37109253,37109252,321587,37108909,4145355,762149,37204827,37310623,37312367,759831,37204002,37312368,37108912,42535098,4088984,4228448,45766074,4319330,4111710,4116060,4303408,313791,40484036,4242670,321042,4041343,4269927,4309332,42534858,4172822,4173792,46269805,46274066,46269812,4301015,4173446,4306984,4311273,37398951,761738,317669,4120088,44784217,44784234,45757098,44784235,4211509,4256374,44783658,4121629,4213731,4296331,4288310,313226,762700,4119617,442615,763093,4112020,4311124,4102124,4201411,43531599,436392,4043734,4046228,4303238,40481147,4146840,42536725,437540,762629,4317291,4317292,36716999,4111711,4045749,45766201,37204809,4029497,4278243,4121803,380747,45766199,4045751,4048789,372924,316437,4190891,45766122,375557,43531607,374384,37312016,37312017,37110239,37312015,37312014,37110238,37110678,37110237,37110679,37312013,441874,4140462,45766121,4269085,4102202,4062269,4066234,4046443,762938,762811,4048787,4223544,4048786,4043735,45766160,45766161,4284132,45766162,4219904,381316,37395576,37309665,761785,42539262,42535148,42535508,42535112,42535504,42535146,42539195,42535506,761835,42535461,765281,42535149,42535507,42535111,42535503,42535147,42535110,42535505,761836,37395574,37395575,42535460,37209562,37309657,42535459,42535458,42535511,42539166,42535114,42535512,761789,42535113,761792,762344,764721,4163543,381591,43021930,316494,4002302,36715042,4141360,4137382,4006976,765568,4098133,44782732,45768887,45771016,4338905,4128968,4337830,36680604,320744,46269694,4267892,4088337,4099974,4121615,316999,4245320,4243358,37204744,37204745,4243901,4183995,372721,45771351,4119782,4091512,4069188,4201023,4178321,4244961,315069,4119598,4068740,45773171,40479232,45766098,4247465,4246955,4002631,4117112,317576,46269996,4175846,37016181,40641917,37309630,40481919,44806109,4045734,37396293,4046884,4121341,4304839,4159164,4153380,4027540,762585,765899,762583,762584,42537643,37109512,37016924,37117127,45772779,37108910,37108913,37016888,37108911,37117075,432346,4108673,45766077,4311006,4236004,4121479,4121480,4143042,4164083,4122762,4148028,4153352,4039439,4029415,4209442,4031342,4216353,44782551,4222582,4224614,4134421,4104693,4182186,42536240,42539472,42536242,42536241,42536243,42539014,4185701,4250507,4267862,4338502,4052462,4327350,4217146,4090122,36675005,4006783,4017134,4240832,37395821,45766128,35624231,4121613,4119603,4129841,314749,4172863,43021733,43022053,317100,4222125,4226399,37204826,761786,765282,314379,4215259,4078314,4029303,35609033,320425,40481891,36715370,36717434,441246,40481389,40484910,42535677,764853,764816,42535704,42535676,764815,37396995,4208824,4164289,37119072,4029597,45766123,4300451,46284985,43020494,4120086,4078058,4320474,764719,37395937,37109917,4171193,4303980,4206453,4108359,4116269,4137871,4124697,4304095,4298806,4088336,4088338,43531712,43530960,43530934,4131383,315116,436277,437427,439190,36717463,4096625,4112021,4088332,4121624,765606,4243143,4029966,4041678,4043900,4120316,4194609,4139561,4179912,37017187,4166844,4221549,4310996,43530669,43530670,37110765,4108869,40482076,40483310,4161597,4091899,4166380,4218739,4088351,4219010,762340,4295336,4171887,316998,313209,761797,43020496,43020498,761791,4155962,4111543,761793,4268046,4112022,761795,762345,4098441,4178578,4153404,764149,4088222,4119601,314664,37396235,43021298,37117768,45768480,437892,36716114,42536724,46272503,36716590,36717575,4088347,4020435,35608087,4173632,763014,4110194,4077819,4088496,36715675,36715676,4003276,4219469,43021816,4323202,4205137,313780,4034164,42535686,42535419,197303,765518,443525,764851,764814,762089,762093,762090,42535417,42535416,764849,764820,40480946,764813,40482266,764850,765461,765462,42539180,762091,764852,37110064,378774,36713633,4155007,4176112,4271464,4023336,379778,37395562,444091,443790,443864,377254,4045742,439295,763009,4242222,4194897,381036,762708,765775,4032493,37204661,4089460,4088985,4089463,4329847,37309626,4170094,4154704,37398927,443522,4106274,4110550,4049043,4173170,45765438,4159152,443523,36717594,4217221,761061,42539038,36714444,4006295,4191222,761790,314667,4111713,4200113,4119602,44784220,44782789,44782707,762096,37017075,4037682,4168972,442055,442049,442052,442051,442050,433832,442053,434112,433545,437060,4061473,435026,440477,442420,442048,439380,439379,4331168,4102928,4111716,765774,4112024,4111715,4112023,765907,765495,4110197,4111717,762936,762707,764445,762343,43531605,764503,762926,762342,37207955,42536349,42539161,42535509,42538819,42536338,42535510,42538981,764447,42535457,762341,37207895,42539514,42538820,42539276,42538818,42536337,42539787,42538828,764446,42535456,764362,764498,764501,764499,764496,764502,764500,764497,4189462,764504,764506,764505,4119949,4121467,4119950,314666,4121468,4124700,4030583,4089464,4023571,372654,4146293,43530612,43530611,443609,443599,43530742,42534989,4006208,4154290,4146580,4190306,4108241,4119604,4111546,4111698,317893,313792,437579,4111570,4138833,36716757,4080888,4171108,4298750,4232691,4124702,4232697,4258998,318137,4104694,4049750,4137761,4110676,4229432,4102204,4174848,4263703,4237180,4237181,762628,4110195,4045748,762631,763095,4301259,43020495,44784368,4119605,4124701,4030582,35610087,44784475,4108681,4124704,4206867,44784293,35610089,4207921,4209541,762954,443239,42539346,4109365,316429,45766200,4238315,44784218,44784219,44782643,4230479,764734,442419,442418,313272,313833,4091708,440417,37109911,4280067,45757145,37016922,43530605,4119608,4253796,45766471,4121618,4119610,4263370,4199501,763267,4178622,4236271,40485430,4124696,4124698,4124699,4111552,37204863,45765600,4317953,45773220,762339,4302802,4249027,314059,4184950,316432,321590,4138973,4244693,4217860,4138545,4280348,4032785,761796,43020497,43021859,4110196,761794,4031946,4049219,4089461,4091904,4173794,380943,762351,4079430,4079433,4082161,764707,42536193,4079431,4079432,4079434,4082162,42536192,45766085,4111707,4120104,4079424,4079120,4079021,4082163,37312595,318448,45773166,40479606,4116206,4047634,4043901,4121335,4119136,4041680,4041679,4169261,44784236,4261842,4161455,36717605,37109909,4124686,4111393,4028322,4277903,4303256,36674897,4120084,4210313,4088352,4088210,4091446,4171683,317302,4179790,4088350,40484120,37396805,4249605,43530636,37309659,42535420,42535421,762095,42535422,42539183,42535879,42535880,4045750,760985,761994,42538826,42535836,765404,374371,42538980,42539411,4188347,37110241,4168056,4046363,4119607,4119609,4108952,4111708,4234089,765132,4108217,4108677,4108218,45766241,45766114,45766113,45773170,765488,40480273,4248028,4091902,42538755,441872,4275423,4120085,4325850,44784634,40480216,4048790,4318863,43021181,43021180,315643,4254116,40489292,4100225,764716,4217471,4104695,4100223,4319332,4167985,764712,764714,764708,763149,4100224,4098706,4277833,764710,764701,764705,764726,4228209,761412,4234264,762828,4319329,4048890,4137209,4273550,4057329,42539416,761411,42535874,42535097,45767657,764722,4144150,764725,4171853,42539417,761410,42538998,42535096,764723,764703,4102203,4290940,4079905,4105338,4159140,4262389,44783199,36714606,4078315,4134941,4134159,373503,4139517,46272244,321315,4124682,439693,42710031,36714994,4120087,4099778,36712982,4106715,43021222,4215653,4179824,4185572,4008580,4327066,4088507,4218242,36714539,437894,4111700,4092010,4244893,4108828,4066289,4089462,4088506,40622721,4088505,4180026,37208181,4274969,4185117,439296,763003,763035,4121637,380423,763004,765609,434656,4273526,4048785,4086178,37110515,4086313,4253363,36676642)
  and c.invalid_reason is null

) I
) C UNION ALL 
SELECT 28 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1436678)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (1436678)
  and c.invalid_reason is null

) I
) C UNION ALL 
SELECT 29 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1348265,1398399,1315946)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (1348265,1398399,1315946)
  and c.invalid_reason is null

) I
) C
;

SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM (-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,
  C.visit_occurrence_id, C.condition_start_date as sort_date
FROM 
(
  SELECT co.* , row_number() over (PARTITION BY co.person_id ORDER BY co.condition_start_date, co.condition_occurrence_id) as ordinal
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 23)
) C

WHERE C.ordinal = 1
-- End Condition Occurrence Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events
) pe
  
) QE

;

--- Inclusion Rule Inserts

select 0 as inclusion_rule_id, person_id, event_id
INTO #Inclusion_0
FROM 
(
  select pe.person_id, pe.event_id
  FROM #qualified_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM #qualified_events E
  INNER JOIN
  (
    -- Begin Demographic Criteria
SELECT 0 as index_id, e.person_id, e.event_id
FROM #qualified_events E
JOIN @cdm_database_schema.PERSON P ON P.PERSON_ID = E.PERSON_ID
WHERE YEAR(E.start_date) - P.year_of_birth >= 20
GROUP BY e.person_id, e.event_id
-- End Demographic Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id
) Results
;

select 1 as inclusion_rule_id, person_id, event_id
INTO #Inclusion_1
FROM 
(
  select pe.person_id, pe.event_id
  FROM #qualified_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM #qualified_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
select 0 as index_id, cc.person_id, cc.event_id
from (SELECT p.person_id, p.event_id 
FROM #qualified_events P
JOIN (
  -- Begin Drug Exposure Criteria
select C.person_id, C.drug_exposure_id as event_id, C.drug_exposure_start_date as start_date,
       COALESCE(C.DRUG_EXPOSURE_END_DATE, DATEADD(day,C.DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,C.DRUG_EXPOSURE_START_DATE)) as end_date,
       C.visit_occurrence_id,C.drug_exposure_start_date as sort_date
from 
(
  select de.* 
  FROM @cdm_database_schema.DRUG_EXPOSURE de
JOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 28)
) C


-- End Drug Exposure Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= DATEADD(day,0,P.START_DATE) AND A.START_DATE <= P.OP_END_DATE ) cc 
GROUP BY cc.person_id, cc.event_id
HAVING COUNT(cc.event_id) >= 1
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id
) Results
;

select 2 as inclusion_rule_id, person_id, event_id
INTO #Inclusion_2
FROM 
(
  select pe.person_id, pe.event_id
  FROM #qualified_events pe
  
JOIN (
-- Begin Criteria Group
select 0 as index_id, person_id, event_id
FROM
(
  select E.person_id, E.event_id 
  FROM #qualified_events E
  INNER JOIN
  (
    -- Begin Correlated Criteria
select 0 as index_id, p.person_id, p.event_id
from #qualified_events p
LEFT JOIN (
SELECT p.person_id, p.event_id 
FROM #qualified_events P
JOIN (
  -- Begin Drug Exposure Criteria
select C.person_id, C.drug_exposure_id as event_id, C.drug_exposure_start_date as start_date,
       COALESCE(C.DRUG_EXPOSURE_END_DATE, DATEADD(day,C.DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,C.DRUG_EXPOSURE_START_DATE)) as end_date,
       C.visit_occurrence_id,C.drug_exposure_start_date as sort_date
from 
(
  select de.* 
  FROM @cdm_database_schema.DRUG_EXPOSURE de
JOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 29)
) C


-- End Drug Exposure Criteria

) A on A.person_id = P.person_id  AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE AND A.START_DATE >= P.OP_START_DATE AND A.START_DATE <= P.OP_END_DATE ) cc on p.person_id = cc.person_id and p.event_id = cc.event_id
GROUP BY p.person_id, p.event_id
HAVING COUNT(cc.event_id) = 0
-- End Correlated Criteria

  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id
  GROUP BY E.person_id, E.event_id
  HAVING COUNT(index_id) = 1
) G
-- End Criteria Group
) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id
) Results
;

SELECT inclusion_rule_id, person_id, event_id
INTO #inclusion_events
FROM (select inclusion_rule_id, person_id, event_id from #Inclusion_0
UNION ALL
select inclusion_rule_id, person_id, event_id from #Inclusion_1
UNION ALL
select inclusion_rule_id, person_id, event_id from #Inclusion_2) I;
TRUNCATE TABLE #Inclusion_0;
DROP TABLE #Inclusion_0;

TRUNCATE TABLE #Inclusion_1;
DROP TABLE #Inclusion_1;

TRUNCATE TABLE #Inclusion_2;
DROP TABLE #Inclusion_2;


select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM (
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups
{3 != 0}?{
  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask
  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),3)-1)
}
) Results

;



-- generate cohort periods into #final_cohort
select person_id, start_date, end_date
INTO #cohort_rows
from ( -- first_ends
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal
	  from #included_events I
	  join ( -- cohort_ends
-- cohort exit dates
-- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
) FE;

select person_id, min(start_date) as start_date, end_date
into #final_cohort
from ( --cteEnds
	SELECT
		 c.person_id
		, c.start_date
		, MIN(ed.end_date) AS end_date
	FROM #cohort_rows c
	JOIN ( -- cteEndDates
    SELECT
      person_id
      , DATEADD(day,-1 * 0, event_date)  as end_date
    FROM
    (
      SELECT
        person_id
        , event_date
        , event_type
        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status
      FROM
      (
        SELECT
          person_id
          , start_date AS event_date
          , -1 AS event_type
        FROM #cohort_rows

        UNION ALL


        SELECT
          person_id
          , DATEADD(day,0,end_date) as end_date
          , 1 AS event_type
        FROM #cohort_rows
      ) RAWDATA
    ) e
    WHERE interval_status = 0
  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
) e
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;

{0 != 0}?{
-- BEGIN: Censored Stats

delete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;

-- END: Censored Stats
}
{0 != 0 & 3 != 0}?{

-- Create a temp table of inclusion rule rows for joining in the inclusion rule impact analysis

select cast(rule_sequence as int) as rule_sequence
into #inclusion_rules
from (
  SELECT CAST(0 as int) as rule_sequence UNION ALL SELECT CAST(1 as int) as rule_sequence UNION ALL SELECT CAST(2 as int) as rule_sequence
) IR;


-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from #inclusion_rules ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from #inclusion_rules ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;

TRUNCATE TABLE #inclusion_rules;
DROP TABLE #inclusion_rules;
}



TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
